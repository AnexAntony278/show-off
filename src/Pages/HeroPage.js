import React, { useEffect, useRef, useState } from "react";
import { ColorSchemes } from '../Themes';
import { usePopper } from "react-popper";

export function HeroPage({ theme }) {
    const [art, setArt] = useState(String.raw`    ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ........................................................................................................................
            ...........................................................   ..........................................................
            ....................................................... :   ..   .......................................................
            ................................................... +      ::::=++* ....................................................
            .............................................. :=.:        :::.:=:+:.* .................................................
            .......................................... ++:::       . .: : :.:-+=+ *+% ..............................................
            ............................................  .       . .::::.:::: +-++.+.+* ...........................................
            ....................+ ..........................  :.    .:::::::.::.++:++ +# ...........................................
            .....................#  .........................             :::..    .................................................
            .......................#= .....................              # -  --+ . ................................................
            ........................-#- ...................    .      -   -. .-.:-* ................................................
            ..........................-#:................. -    : -  ..+  -     ::-*................................................
            ............................ #.- ............ =    - -    :  -      -- .................................................
            .............................. %== .......... .   : -       -     :  --*................................................
            .................................:#-:........ :     -.     :         -: ................................................
            ................................... %.= .....    --:--            #:.-:-................................................
            ......................................-*=:  ::-.   :                 - *................................................
            ........................................ %.=        .=+          :*---. ................................................
            ........................................... #:= :.    =          -  .:%%................................................
            ............................................  *+=:    :=-      -.#     : ...............................................
            ............................................     %:=   .-     ==*          + ...........................................
            ..........................................  -       %*  =+   :-      ----:      =: .....................................
            ..........................................--              + ++            :- ...     * .................................
            ........................................             -  +  : +=        .    .- .....     -: ............................
            ...................................... %:                 + =+             :-+   ........    + .........................
            .....................................    .                     . -         -. :--- ..........   . ......................
            ................................... .=                            .--         -----% ...................................
            ................................. *-                                 .--         .-- ...................................
            ................................. :                       .             .:-       : + ..................................
            ................................ -                       ...                 -     -- ..................................
            ............................... :-                      .....                  .-+   ...................................
            .............................. -                      .........                   .:- ..................................
            ................................  -                   ..........                .:=%  .-# ..............................
            .............................. :      ...            ............          ...     + ...   -% ..........................
            ............................. +    ..............    .............    ..........    + ......  .-+. .....................
            ............................  :  ................................................    *+.........  .--+ .................
            ........................  +      ...................                      .......      -% ..........  :--# .............
            ...................                                                                .=+.     *         ..................
            ....................................                                                  ..................................
            ........................................................................................................................
            ...............................................................................................................+++=+....
            .............................................................................................................. +. =+ ...
            ........................................................................................................................
            ........................................................................................................................
            `);
    const age = useRef(null);
    const animationRef = useRef();

    const [referenceElement, setReferenceElement] = useState(null);
    const [popperElement, setPopperElement] = useState(null);
    const [showPopper, setShowPopper] = useState(false);
    const popperHideTimeout = useRef(null);

    const { styles, attributes } = usePopper(referenceElement, popperElement, {
        placement: "left",
    });

    useEffect(() => {
        const birthDate = new Date("2003-08-27");
        const today = new Date();
        age.current = today.getFullYear() - birthDate.getFullYear() -
            (today.getMonth() < birthDate.getMonth() ||
                (today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate()) ? 1 : 0);
    }, []);

    useEffect(() => {
        const rootEl = document.querySelector(":root");
        rootEl.style.setProperty("--primaryColor", `${ColorSchemes.primaryOf(theme)}`);
        rootEl.style.setProperty("--secondaryColor", `${ColorSchemes.secondaryOf(theme)}`);
        rootEl.style.setProperty("--accentColor", `${ColorSchemes.accentOf(theme)}`);
    }, [theme]);

    useEffect(() => {
        let isMounted = true;
        const fetchASCIIArt = async () => {
            const apiUrl = "https://ascii-art-api-gw06.onrender.com";
            const resourceName = "images/anex.jpg";
            try {
                const imageResponse = await fetch(`/assets/${resourceName}`);
                if (!imageResponse.ok) {
                    throw new Error(`Failed to fetch image from public folder: ${imageResponse.statusText}`);
                }
                const imageBlob = await imageResponse.blob();
                const formData = new FormData();
                formData.append('file', imageBlob, resourceName.split('/').pop());
                formData.append('fps', 20);
                formData.append('quality', 'HIGH');

                const apiResponse = await fetch(`${apiUrl}/v1/ascii-art`, {
                    method: "POST", body: formData
                });

                if (!apiResponse.ok) {
                    throw new Error(`Failed to fetch ACII API reponse: ${apiResponse.statusText}`);
                }
                const asciiArtResponse = await apiResponse.json();
                const asciiArt = asciiArtResponse.ascii_art;
                let i = 0;
                const animate = () => {
                    if (!isMounted || i >= asciiArt.length) return;
                    setArt(asciiArt[i++]);
                    animationRef.current = setTimeout(animate, 1000 / asciiArtResponse.fps);
                };
                animate();
            } catch (error) {
                console.log(error)
            }
        };
        fetchASCIIArt();
        return () => {
            isMounted = false;
            if (animationRef.current) clearTimeout(animationRef.current);
        };
    }, []);

    const handleMouseEnter = () => {
        if (popperHideTimeout.current) {
            clearTimeout(popperHideTimeout.current);
            popperHideTimeout.current = null;
        }
        setShowPopper(true);
    };

    const handleMouseLeave = () => {
        popperHideTimeout.current = setTimeout(() => {
            setShowPopper(false);
        }, 1000);
    };

    useEffect(() => {
        return () => {
            if (popperHideTimeout.current) clearTimeout(popperHideTimeout.current);
        };
    }, []);

    return (
        <div className="page" id='home-page'
            style={{
                backgroundColor: ColorSchemes.primaryOf(theme),
                display: "flex", alignItems: "end", width: "100vw"
            }}>
            <div style={{
                display: "flex",
                flexDirection: "row",
                justifyContent: "space-between",
                alignItems: "end",
                margin: "5vh 3vw"
            }}>
                <div style={{ width: "60vw" }}>
                    <h2 style={{ opacity: ".87" }}>Hey, I'm</h2>
                    <h1>Anex Antony</h1>
                    <p style={{ opacity: ".87" }}>
                        Computer Science Engineer and Full-Time Human<br />
                        Batman by night 🕹️🎮. Stupid & {age.current}.<br />
                        BEA-uty of life :)
                    </p>
                </div>
                <div style={{ display: "flex", justifyContent: "flex-end", width: "40vw", borderRadius: "40% 0% 40% 0% ", overflow: 'hidden' }}>
                    <pre
                        className="ascii-art"
                        ref={setReferenceElement}
                        onMouseEnter={handleMouseEnter}
                        onMouseLeave={handleMouseLeave}
                        style={{
                            lineHeight: '1.1', fontSize: "0.46vw", overflow: "hidden",
                            width: "max-content", textAlign: "right",
                            marginRight: "6vw", textShadow: "1px 1px 2px"
                        }}
                    >
                        <strong>
                            {art}
                        </strong>
                    </pre>
                    {showPopper && (
                        <span
                            ref={setPopperElement}
                            className="popper-tooltip"
                            style={styles.popper}
                            {...attributes.popper}
                        >
                            <a href="https://ascii-art-api-gw06.onrender.com/" target="_blank" rel="noreferrer noopener">
                                Make your own ASCII art
                            </a>
                        </span>
                    )}
                </div>
            </div>
        </div>
    );
}
